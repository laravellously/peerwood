// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  emailVerifiedAt     DateTime?
  lastLoginAt         DateTime?
  updatedAt           DateTime         @updatedAt
  createdAt           DateTime         @default(now())
  deletedAt           DateTime?
  referrals           UserReferral[]
  profile             UserProfile?
  kyc                 UserKYC?
  activities          UserActivity[]
  deposits            UserDeposit[]
  withdrawals         UserWithdrawal[]
  tickets             UserTicket[]

  @@map("users")
}

model UserProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  firstName      String?
  lastName       String?
  newsletter     Boolean   @default(true)
  unusual        Boolean
  saveActivity   Boolean   @default(true)
  changePassword Boolean   @default(true)
  emailExpire    DateTime?
  updatedAt      DateTime  @updatedAt
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?

  @@map("user_profiles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model UserTicket {
  id         String    @id @default(cuid())
  userId     String    @unique
  title      String
  message    String
  attachment String?
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])

  @@map("user_tickets")
}

model UserKYC {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  phone        String
  birthday     String
  gender       String
  address      String
  city         String
  state        String
  zip          String?
  country      String
  telegram     String?
  documentType String
  documentPath String
  status       String    @default("PENDING")
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  @@map("user_kycs")
}

model UserActivity {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  device    String
  browser   String
  ip        String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("user_activities")
}

model UserReferral {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  referredBy String
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?

  @@map("user_referrals")
}

model UserDeposit {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  amount    Decimal
  txType    String    @default("FIAT") // CRYPTO
  currency  String    @default("NGN")
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("user_deposits")
}

model UserWithdrawal {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  amount          Decimal
  currency        String    @default("NGN")
  txType          String    @default("FIAT") // CRYPTO
  txBank          String?
  txBeneficiary   String?
  txNumber        String?
  txCountry       String?
  txWalletAddress String?
  status          String    @default("PENDING")
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
  deletedAt       DateTime?

  @@map("user_withdrawals")
}

model UserNotification {
  id        String    @id @default(cuid())
  userId    String
  message   String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  readAt    DateTime?

  @@map("user_notifications")
}

model Coin {
  id        String    @id @default(cuid())
  name      String?
  baseUnit  Decimal?
  symbol    String?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  wallets   Wallet[]

  @@map("coins")
}

model Wallet {
  id         String @id @default(cuid())
  userId     String @unique
  address    String
  label      String
  passphrase String @unique

  coinId       String
  coin         Coin          @relation(fields: [coinId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id     String  @id @default(cuid())
  hash   String
  txType String  @default("DEPOSIT") // WITHDRAWAL, TRANSFER
  amount Decimal

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  walletId  String
  wallet    Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Log {
  id        String    @id @default(cuid())
  message   String
  logLevel  String    @default("INFO") //WARNING, ERROR, DEBUG
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("logs")
}
